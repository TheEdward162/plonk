; R0 = GATES to enable
CONFIG_CLOCK PROC
; Registers

! PLONK(1): ONE = 1, CR = =RCC_CR, CF = =RCC_CFGR

; reset clock bits 16 and 18 (HESON and HSEBYP)
read [$CR]
	BIC $0, $0, #0b0101_00000000_00000000
write

; enable HSEON
store [=HSEON] $ONE

; Wait until HSERDY is stable
alloc HSE_ADDR =HSERDY
HSE_NOT_READY
	read [$HSE_ADDR] HSE_READY
		ifeq $HSE_READY 0 HSE_NOT_READY
	discard
free

; set SCLK
read [$CF]
	BIC $0, $0, #0b1111_0000
write

; set HCLK PPRE2
read [$CF]
	BIC $0, $0, #0b111000_00000000
write

; set HCLK PPRE1
read [$CF]
	BIC $0, $0, #0b111_00000000
	ORR $0, $0, #0b100_00000000
write

; set PLLSRC and PLLMUL to x3 (as 24MHz clock)
read [$CF]
	BIC $0, $0, #0b111111_00000000_00000000
	ORR $0, $0, #0b000101_00000000_00000000
write
				
; Enable PLLON
store [=PLLON] $ONE

; Wait until PLLRDY is stable
alloc PLL_ADDR =PLLRDY
PLL_NOT_READY
	read [$PLL_ADDR] PLL_READY
		ifeq $PLL_READY 0 PLL_NOT_READY
	discard
free

; set PLL as clock
read [$CF]
	BIC $0, $0, #0b11
	ORR $0, $0, #0b10
write

; Link clock to gates
read [=RCC_APB2ENR]
	ORR $0, $0, $A0
write

	BX LR
	ENDP
!!

; R0 = GPIO register to configure
; R1 = mask to zero
; R2 = bits to set
CONFIG_GPIO PROC
! PLONK(3):

read [$A0]
	BIC $0, $0, $A1
	ORR $0, $0, $A2
write

	BX LR
	ENDP
!!

; R0 = number of outer iterations
; The clock is set to 24MHz - 24000000 operations per second
; Delay waits for 1 ms * R0
DELAY PROC
! PLONK(1):

alloc
	PUSH { $0 }

; inner should take 1 ms, that is 24000 cycles as 24MHz
; 11998 * 2 from INNER + 4 from OUTER = 24000
; Of course that doesn't work
OUTER
	NOP
	; 2998 works in the simulator
	; 9000 works on the board
	MOV $0, #9000
INNER
	SUBS $0, $0, #1
	BNE INNER

; sub the user argument
	SUBS $A0, $A0, #1
	BNE OUTER
	
	POP { $0 }
free

	BX LR
	ENDP
!!
