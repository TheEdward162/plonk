; alloc/free
	LDR R7, =0x1
	LDR R6, =FOO

	MOV R2, #0x1

	LDR R2, =FOO
	MOV R2, #0x2
	MOV R3, #0x3

	LDR R2, =0x2
	MOV R2, #0x3

	MOV R7, #0x3

; store
	LDR R7, =0x1
	LDR R6, =FOO

	LDR R3, =ADDR
	LDR R4, =0x2
	STR R4, [R3]

	STR R0, [R2]

	STR R2, [R7]

	STR R6, [R2]

	STR R1, [R0]

; call
	LDR R7, =0x1
	LDR R6, =FOO

; TODO: WRONG, DONT USE call LABEL =ADDR R7 R0 R2
;	PUSH { R0, R1, R2 }
;
;	LDR R0, =ADDR
;	MOV R1, R7
;	MOV R2, R0 ; TODO: WRONG
;	MOV R3, R2 ; TODO: Also WRONG
;	BL LABEL
;	POP { R2, R1, R0 }

	BL BABEL

	PUSH { R0 }
	LDR R0, =0x7
	BL CABEL
	POP { R0 }

	PUSH { R0 }
	LDR R0, =0x8
	PUSH { LR }
	BL DABEL
	POP { LR }
	POP { R0 }

; if variants
	LDR R7, =0x1
	LDR R6, =FOO

	LDR R3, =ADDR
	CMP R3, R2
	BEQ LABEL

	CMP R2, R7
	BEQ BABEL

	CMP R6, R0
	BEQ CABEL

	LDR R3, =ADDR
	CMP R7, R3
	BEQ DABEL

	CMP R0, R0
	BEQ EABEL

	CMP R0, #0x3
	BNE FABEL

	LDR R3, =ADDR
	CMP R3, R2
	BGT GABEL

	TST R0, #0xB
	BNE HABEL

	TST R0, #0xB
	BEQ IABEL

; read/write/discard
	LDR R7, =0x1
	LDR R6, =FOO

	LDR R3, =ADDR
	LDR R4, [R3]
	MOV R4, #0x2
	STR R4, [R3]

	LDR R3, [R2]
	MOV R3, R7
	STR R3, [R2]

	LDR R3, [R0]
	MOV R3, R0
	STR R3, [R0]

	LDR R3, =ADDR
	LDR R4, [R3]
	TST R4, #0x4

	LDR R3, [R6]
	MOV R3, #0x1
	STR R3, [R6]

	LDR R3, [R0]
	MOV R3, R1
	STR R3, [R0]

